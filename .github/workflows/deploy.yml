name: CI/CD - Build & Deploy
on:
  push:
    branches:
      - main

env:
  IMAGE: ${{ secrets.DOCKERHUB_REPO }}:latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image (buildx)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE }}
          platforms: linux/amd64
          # optional: enable build cache (uncomment if you want)
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            mkdir -p ~/apps/myapp
            cd ~/apps/myapp

            # If no docker-compose.yml present, create a simple fallback compose using the built image
            if [ ! -f docker-compose.yml ]; then
              cat > docker-compose.yml <<'YAML'
            version: "3.8"
            services:
              web:
                image: ${IMAGE}
                container_name: myapp-web
                restart: always
                ports:
                  - "8080:5000"
                environment:
                  - PORT=5000
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:5000/"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            YAML
            fi

            # login docker on server (use docker username & token from secrets)
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # pull latest image and up with compose (or run docker run)
            sudo docker pull ${IMAGE} || true
            sudo docker compose pull || true
            sudo docker compose up -d
            sudo docker image prune -f || true
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
